from datetime import datetime
import configuration
import subprocess
import daemon.daemon as daemon
import timetable.utils
import os
import logging

def get_cpu_temp():
    try:
        tempfile = open('/sys/class/thermal/thermal_zone0/temp')
        cpu_temp = tempfile.read()
        tempfile.close()
        return float(cpu_temp) / 1000
    except:
        logging.getLogger().error("Failed to get CPU temp. Make sure you're running this on linux-based machine")
        return '2.000.000'
def get_uptime():
    try:
        return str(subprocess.check_output('uptime -p'.split()))[4:-3].replace('seconds', '—Å–µ–∫—É–Ω–¥(—ã)').replace('day', '–¥–Ω–µ–π(—è)').replace('hour', '—á–∞—Å–æ–≤').replace('minute', '–º–∏–Ω—É—Ç(—ã)').replace('s', '')
    except: 
        logging.getLogger().error("Failed to get uptime. Make sure you're running this on linux-based machine")
        return '1 —Å–µ–∫—É–Ω–¥–∞'

def get_exception_handler(bot):
    
    def exception_handler(exc_type, exc_value, traceback):
        logging.exception(str(exc_type) + ' ' + str(exc_value) + ' ' + str(traceback))

        for id in configuration.debug_info_receivers: 
            bot.send_message(id, 'üå™  –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n' + str(exc_type) + ' ' + str(exc_value) + ' ' + str(traceback))

    return exception_handler    


def get_state_reply(daemon: daemon.Daemon) -> str: 
    daemon.update_ring_order()
    nearest, table = daemon.order, daemon.today_timetable
    nowEvent = "Off"

    if nearest == 0:
        current_rings = '–ü–µ—Ä–≤—ã–π –∑–≤–æ–Ω–æ–∫ –ø—Ä–æ–∑–≤–µ–Ω–∏—Ç –≤ ' + table[0]

    elif nearest != -1:
        thisPeriod = 0
        nextPeriod = 0
        nowEvent = "Off"
        if nearest != 0:
            hours, minutes = map(int, table[nearest-1].split(':'))
            difference = list(map(int, timetable.utils.sub_times(table[nearest], hours * 3600 + minutes * 60).split(":")))
            thisPeriod = str(difference[0] * 60 + difference[1]) + " –º–∏–Ω"
            if nearest % 2 == 0:
                nowEvent = "–ø–µ—Ä–µ–º–µ–Ω–∞"
            else:
                nowEvent = "—É—Ä–æ–∫"
        if nearest == len(table)-1:
            nextPeriod = "–Ω–∏—Å–∫–æ–ª—å–∫–æ"
        else:
            hours, minutes = map(int, table[nearest].split(':'))
            difference = list(map(int, timetable.utils.sub_times(table[nearest+1], hours * 3600 + minutes * 60).split(":")))
            nextPeriod = str(difference[0] * 60 + difference[1]) + " –º–∏–Ω"
        if nowEvent == "Off":
            thisPeriod = "–Ω–∏—Å–∫–æ–ª—å–∫–æ"
        current_rings = ('–¢–µ–∫—É—â–∏–π ' if nowEvent == '—É—Ä–æ–∫' else '–¢–µ–∫—É—â–∞—è ') + nowEvent + ' –¥–ª–∏—Ç—Å—è ' + thisPeriod
        
    else:
        current_rings = '–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤'
    
    ans = f'''ü§ñ –û—Ç—á—ë—Ç –æ—Ç {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üõé –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤: 
''' 

    ans += f'''–°–ª–µ–¥—É—é—â–∏–π –∑–≤–æ–Ω–æ–∫ –≤: {table[nearest]}
–°–µ–π—á–∞—Å: {nowEvent.capitalize()}
{current_rings}''' if nowEvent != 'Off' else current_rings

    ans += f'''

‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞: –∑–∞ {configuration.pre_ring_delta // 60} –º–∏–Ω –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
–î–ª–∏–Ω–∞ –∑–≤–æ–Ω–∫–∞: {configuration.ring_duration} —Å
–î–ª–∏–Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞: {configuration.pre_ring_duration} —Å

üíæ –°–∏—Å—Ç–µ–º–∞
–ê–ø—Ç–∞–π–º: {get_uptime()}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {get_cpu_temp()}¬∞–°
–°—Ç–∞—Ç—É—Å: {configuration.status}

üï∏Ô∏è –î–µ–º–æ–Ω
–°–ø–∏—Å–æ–∫ –∑–≤–æ–Ω–∫–æ–≤: {daemon.today_timetable}
Mute-—Å–ø–∏—Å–æ–∫: {daemon.sounds}
'''
    return ans
